{"version":3,"sources":["components/Card/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_React$createElement","react_default","a","createElement","className","alt","name","src","image","id","Object","defineProperty","scoreCount","Score","total","topscore","status","App","state","crafts","selectedCraftId","score","maxscore","counter","_this","includes","setState","push","length","i","j","Math","floor","random","_ref","_this2","this","components_Score","goal","map","craft","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6e84689.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} id={props.id} alt=\"thumbnail\" className=\"img-thumbnail\"\n        onClick={() => props.scoreCount(props.id)} />\n        </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nconst Score = props => (\n  <div className=\"gameScore\">\n    <h3 className=\"score\">Your Score : {props.total}   / Top Score : {props.topscore}</h3>\n    <h3 className=\"status\">{props.status}</h3>\n  </div>\n);\n\nexport default Score;","import React, { Component } from \"react\";\nimport crafts from \"./clickcard.json\";\nimport Card from \"./components/Card\";\nimport Score from \"./components/Score\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        crafts,\n        selectedCraftId: [],\n        score: 0,\n        maxscore: 8,\n        topscore: 0,\n        status: \"\",\n        counter: 1\n    };\n    \n    scoreCount = (id) => {\n        let selectedCraftId = this.state.selectedCraftId;\n\n        if (selectedCraftId.includes(id)) {\n            if(this.state.counter > this.state.topscore){\n            this.setState({ selectedCraftId: [], score: 0, topscore: this.state.counter, counter: 0, status: \"You Lost the Game\" });\n            }\n            else\n            {\n                this.setState({ selectedCraftId: [], score: 0, counter: 0, status: \"You Lost the Game\" });\n            }\n            return;\n        } else {\n            selectedCraftId.push(id)\n            this.setState({ counter: this.state.counter + 1});\n\n            if(this.state.counter > this.state.topscore){\n                this.setState({topscore: this.state.counter});\n            }\n            if (selectedCraftId.length === 12) {\n                this.setState({ score: 0, topscore: this.state.counter, counter: 0, status: \"You've Landed all the crafts\", selectedCraftId: [], });\n                return;\n            }\n\n            this.setState({ selectedCraftId, score: selectedCraftId.length, status: \" \" });\n\n            for (let i = crafts.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1));\n                [crafts[i], crafts[j]] = [crafts[j], crafts[i]];\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n             <div className=\"App-container\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Click It</h1>\n                    \n                </header>\n                <Score total={this.state.score}\n                    goal={12}\n                    status={this.state.status}\n                    topscore={this.state.topscore}\n                />\n                {crafts.map(craft => (\n                    <Card\n                        scoreCount={this.scoreCount}\n                        id={craft.id}\n                        key={craft.id}\n                        image={craft.image}\n                    />\n\n                ))}\n            </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}